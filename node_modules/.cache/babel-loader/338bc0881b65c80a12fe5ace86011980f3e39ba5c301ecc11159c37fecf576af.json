{"ast":null,"code":"import { updateDBObject, getDBObject, removeDBObject } from \"../../firebase/database\";\nimport store from \"../../reducers/store\";\nimport request from \"request\";\nexport function saveSong() {\n  window.sessionStorage.setItem(\"mostRecentCreateSong\", store.getState().createLessonTitle);\n  let vid = store.getState().createLessonVideo.split(\"=\")[1];\n  if (!vid) {\n    vid = null;\n  }\n  updateDBObject(`songs/unofficial/${store.getState().user.uid}/splash/${store.getState().createLessonTitle}`, {\n    genre: store.getState().createLessonGenre,\n    image: store.getState().createLessonImage,\n    author: store.getState().user.nick,\n    vid\n  });\n  updateDBObject(`songs/unofficial/${store.getState().user.uid}/detailed/${store.getState().createLessonTitle}`, {\n    questions: store.getState().questionList\n  }, () => {\n    store.dispatch({\n      type: \"CREATE_LESSON_SET_SAVE_BTN_TXT\",\n      text: \"Saved!\"\n    });\n    setTimeout(() => {\n      store.dispatch({\n        type: \"CREATE_LESSON_SET_SAVE_BTN_TXT\",\n        text: \"Save\"\n      });\n    }, 1000);\n  });\n}\nexport function publishSong() {\n  saveSong();\n  updateDBObject(`songs/unofficial/${store.getState().user.uid}/splash/${store.getState().createLessonTitle}`, {\n    public: true\n  });\n}\nexport function loadSong(songName) {\n  getDBObject(`songs/unofficial/${store.getState().user.uid}/splash/${songName}`, splashData => {\n    store.dispatch({\n      type: \"CREATE_LESSON_UPDATE_TITLE\",\n      title: songName\n    });\n    store.dispatch({\n      type: \"CREATE_LESSON_UPDATE_GENRE\",\n      genre: splashData.genre\n    });\n    store.dispatch({\n      type: \"CREATE_LESSON_UPDATE_IMAGE\",\n      image: splashData.image\n    });\n    store.dispatch({\n      type: \"CREATE_LESSON_UPDATE_VIDEO\",\n      video: splashData.vid ? `https://www.youtube.com/watch?v=${splashData.vid}` : \"\"\n    });\n  });\n  getDBObject(`songs/unofficial/${store.getState().user.uid}/detailed/${songName}`, detailedData => {\n    store.dispatch({\n      type: \"CREATE_LESSON_LESSON_SET_QUESTIONS\",\n      questions: detailedData ? detailedData.questions ? detailedData.questions : [] : []\n    });\n  });\n}\nexport function loadSongFromStorage() {\n  const lastSong = window.sessionStorage.getItem(\"mostRecentCreateSong\");\n  //Todo: Test going back to /createlesson refilling the input fields\n  if (lastSong) {\n    loadSong(lastSong);\n  }\n}\nexport function deleteSong() {\n  removeDBObject(`songs/unofficial/${store.getState().user.uid}/detailed/${store.getState().createLessonDeleteSongname}`);\n  removeDBObject(`songs/unofficial/${store.getState().user.uid}/splash/${store.getState().createLessonDeleteSongname}`, () => {\n    loadSavedSongs();\n  });\n  store.dispatch({\n    type: \"CREATE_LESSON_WIPE_DELETE_SONGNAME\"\n  });\n}\nexport function validateInput(questions, name, image, video) {\n  //Todo: Just read this from props\n  let error = \"\";\n  if (name.length < 5) {\n    if (name.length === 0) {\n      error += \"A lesson name is required\\n\";\n    } else {\n      error += \"A lesson name is too short! (Minimum 5 characters)\\n\";\n    }\n  }\n  if (!video.includes(\"youtube.com/watch?v=\")) {\n    if (video.length === 0) {\n      error += \"A Youtube URL is required\\n\";\n    } else {\n      error += \"Invalid Youtube video URL\\n\";\n    }\n  }\n  if (!image.match(/\\.(jpeg|jpg|gif|png)$/)) {\n    if (image.length === 0) {\n      error += \"An image URL is required\\n\";\n    } else {\n      error += \"Invalid Image URL\\n\";\n    }\n  }\n  if (questions.length < 5) {\n    error += \"Minimum of 5 questions is required\\n\";\n  }\n  store.dispatch({\n    type: \"SET_ERROR\",\n    error\n  });\n  return error;\n}\nexport function loadSavedSongs() {\n  // TODO: Move this to the database version\n  request({\n    url: `https://ourkorean-56a3e.firebaseio.com/songs/unofficial/${store.getState().user.uid}/splash.json?shallow=true`\n  }, (error, response, body) => {\n    let rowData = [];\n    Object.keys(JSON.parse(body)).forEach(songname => {\n      rowData.unshift(songname);\n    });\n    store.dispatch({\n      type: \"CREATE_LESSON_UPDATE_LOAD_MODAL_DATA\",\n      data: rowData\n    });\n  });\n}","map":{"version":3,"names":["updateDBObject","getDBObject","removeDBObject","store","request","saveSong","window","sessionStorage","setItem","getState","createLessonTitle","vid","createLessonVideo","split","user","uid","genre","createLessonGenre","image","createLessonImage","author","nick","questions","questionList","dispatch","type","text","setTimeout","publishSong","public","loadSong","songName","splashData","title","video","detailedData","loadSongFromStorage","lastSong","getItem","deleteSong","createLessonDeleteSongname","loadSavedSongs","validateInput","name","error","length","includes","match","url","response","body","rowData","Object","keys","JSON","parse","forEach","songname","unshift","data"],"sources":["/home/xacket/Projects/engresume/src/pages/createlesson/utils.js"],"sourcesContent":["import {\n  updateDBObject,\n  getDBObject,\n  removeDBObject,\n} from \"../../firebase/database\";\nimport store from \"../../reducers/store\";\nimport request from \"request\";\n\nexport function saveSong() {\n  window.sessionStorage.setItem(\"mostRecentCreateSong\", store.getState().createLessonTitle);\n\n  let vid = store.getState().createLessonVideo.split(\"=\")[1];\n  if (!vid) {\n    vid = null;\n  }\n\n  updateDBObject(\n    `songs/unofficial/${store.getState().user.uid}/splash/${\n    store.getState().createLessonTitle\n    }`,\n    {\n      genre: store.getState().createLessonGenre,\n      image: store.getState().createLessonImage,\n      author: store.getState().user.nick,\n      vid,\n    }\n  );\n\n  updateDBObject(\n    `songs/unofficial/${store.getState().user.uid}/detailed/${\n    store.getState().createLessonTitle\n    }`,\n    {\n      questions: store.getState().questionList,\n    },\n    () => {\n      store.dispatch({ type: \"CREATE_LESSON_SET_SAVE_BTN_TXT\", text: \"Saved!\" });\n      setTimeout(\n        () => {\n          store.dispatch({ type: \"CREATE_LESSON_SET_SAVE_BTN_TXT\", text: \"Save\" });\n        }, 1000);\n    }\n  );\n}\n\nexport function publishSong() {\n  saveSong();\n  updateDBObject(\n    `songs/unofficial/${store.getState().user.uid}/splash/${\n    store.getState().createLessonTitle\n    }`,\n    {\n      public: true,\n    }\n  );\n}\n\nexport function loadSong(songName) {\n  getDBObject(\n    `songs/unofficial/${store.getState().user.uid}/splash/${songName}`,\n    (splashData) => {\n      store.dispatch({ type: \"CREATE_LESSON_UPDATE_TITLE\", title: songName });\n      store.dispatch({ type: \"CREATE_LESSON_UPDATE_GENRE\", genre: splashData.genre });\n      store.dispatch({ type: \"CREATE_LESSON_UPDATE_IMAGE\", image: splashData.image });\n      store.dispatch({\n        type: \"CREATE_LESSON_UPDATE_VIDEO\",\n        video: splashData.vid\n          ? `https://www.youtube.com/watch?v=${splashData.vid}`\n          : \"\",\n      });\n    }\n  );\n\n  getDBObject(\n    `songs/unofficial/${store.getState().user.uid}/detailed/${songName}`,\n    (detailedData) => {\n      store.dispatch({\n        type: \"CREATE_LESSON_LESSON_SET_QUESTIONS\",\n        questions: detailedData\n          ? detailedData.questions\n            ? detailedData.questions\n            : []\n          : [],\n      });\n    }\n  );\n}\n\nexport function loadSongFromStorage() {\n  const lastSong = window.sessionStorage.getItem(\"mostRecentCreateSong\");\n  //Todo: Test going back to /createlesson refilling the input fields\n  if (lastSong) {\n    loadSong(lastSong);\n  }\n}\n\nexport function deleteSong() {\n  removeDBObject(\n    `songs/unofficial/${store.getState().user.uid}/detailed/${\n    store.getState().createLessonDeleteSongname\n    }`\n  );\n\n  removeDBObject(\n    `songs/unofficial/${store.getState().user.uid}/splash/${\n    store.getState().createLessonDeleteSongname\n    }`,\n    () => {\n      loadSavedSongs();\n    }\n  );\n\n  store.dispatch({\n    type: \"CREATE_LESSON_WIPE_DELETE_SONGNAME\",\n  });\n}\n\nexport function validateInput(questions, name, image, video) {\n  //Todo: Just read this from props\n  let error = \"\";\n\n  if (name.length < 5) {\n    if (name.length === 0) {\n      error += \"A lesson name is required\\n\";\n    } else {\n      error += \"A lesson name is too short! (Minimum 5 characters)\\n\";\n    }\n  }\n\n  if (!video.includes(\"youtube.com/watch?v=\")) {\n    if (video.length === 0) {\n      error += \"A Youtube URL is required\\n\";\n    } else {\n      error += \"Invalid Youtube video URL\\n\";\n    }\n  }\n\n  if (!image.match(/\\.(jpeg|jpg|gif|png)$/)) {\n    if (image.length === 0) {\n      error += \"An image URL is required\\n\";\n    } else {\n      error += \"Invalid Image URL\\n\";\n    }\n  }\n\n  if (questions.length < 5) {\n    error += \"Minimum of 5 questions is required\\n\";\n  }\n\n  store.dispatch({ type: \"SET_ERROR\", error });\n  return error;\n}\n\nexport function loadSavedSongs() {\n  // TODO: Move this to the database version\n  request(\n    {\n      url: `https://ourkorean-56a3e.firebaseio.com/songs/unofficial/${\n        store.getState().user.uid\n        }/splash.json?shallow=true`,\n    },\n    (error, response, body) => {\n      let rowData = [];\n      Object.keys(JSON.parse(body)).forEach((songname) => {\n        rowData.unshift(songname);\n      });\n      store.dispatch({\n        type: \"CREATE_LESSON_UPDATE_LOAD_MODAL_DATA\",\n        data: rowData,\n      });\n    }\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}