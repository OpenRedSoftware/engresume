{"ast":null,"code":"import { getDBObject } from \"../../firebase/database\";\nimport store from \"../../reducers/store\";\nimport request from 'request';\nlet loadedOfficial = false;\nlet loadedUnofficial = false;\nexport function loadCards() {\n  let official = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  function loadSplashFrom(path) {\n    getDBObject(path, lessonsCardInfos => {\n      //Turn from songName: {..data}, songName2: {..data} to [{songdata}, {songdata}]\n      let splashCardObjects = [];\n      Object.keys(lessonsCardInfos).forEach(e => {\n        if (official || lessonsCardInfos[e].public) {\n          splashCardObjects.push({\n            title: e,\n            image: lessonsCardInfos[e].image,\n            genre: lessonsCardInfos[e].genre,\n            views: lessonsCardInfos[e].views,\n            author: lessonsCardInfos[e].author,\n            unofficial: !official\n          });\n        }\n      });\n      store.dispatch({\n        type: \"ADD_SPLASH_CARD_INFO\",\n        lessonsCardInfos: splashCardObjects\n      });\n    });\n  }\n\n  //Used to prevent loading multiple times\n  if (official && loadedOfficial || !official && loadedUnofficial) {\n    return;\n  }\n  if (official) {\n    loadedOfficial = true;\n  } else {\n    loadedUnofficial = true;\n  }\n  if (official) {\n    loadSplashFrom(\"songs/official/splash\");\n  } else {\n    // TODO: Move this to new database function\n    request({\n      url: \"https://ourkorean-56a3e.firebaseio.com/songs/unofficial/.json?shallow=true\"\n    }, (error, response, body) => {\n      Object.keys(JSON.parse(body)).forEach(userWithCard => {\n        loadSplashFrom(`songs/unofficial/${userWithCard}/splash`);\n      });\n    });\n  }\n}","map":{"version":3,"names":["getDBObject","store","request","loadedOfficial","loadedUnofficial","loadCards","official","arguments","length","undefined","loadSplashFrom","path","lessonsCardInfos","splashCardObjects","Object","keys","forEach","e","public","push","title","image","genre","views","author","unofficial","dispatch","type","url","error","response","body","JSON","parse","userWithCard"],"sources":["/home/xacket/Projects/engresume/src/pages/lessons/utils.js"],"sourcesContent":["import { getDBObject } from \"../../firebase/database\";\nimport store from \"../../reducers/store\";\nimport request from 'request';\n\nlet loadedOfficial = false;\nlet loadedUnofficial = false;\n\nexport function loadCards(official = true) {\n  function loadSplashFrom(path) {\n    getDBObject(path, (lessonsCardInfos) => {\n      //Turn from songName: {..data}, songName2: {..data} to [{songdata}, {songdata}]\n      let splashCardObjects = [];\n      Object.keys(lessonsCardInfos).forEach((e) => {\n        if (official || lessonsCardInfos[e].public) {\n          splashCardObjects.push({\n            title: e,\n            image: lessonsCardInfos[e].image,\n            genre: lessonsCardInfos[e].genre,\n            views: lessonsCardInfos[e].views,\n            author: lessonsCardInfos[e].author,\n            unofficial: !official\n          });\n        }\n      });\n\n      store.dispatch({\n        type: \"ADD_SPLASH_CARD_INFO\",\n        lessonsCardInfos: splashCardObjects,\n      });\n    });\n  }\n\n  //Used to prevent loading multiple times\n  if ((official && loadedOfficial) || (!official && loadedUnofficial)) {\n    return;\n  }\n  if (official) {\n    loadedOfficial = true;\n  } else {\n    loadedUnofficial = true;\n  }\n\n  if (official) {\n    loadSplashFrom(\"songs/official/splash\");\n  } else {\n    // TODO: Move this to new database function\n    request({ url: \"https://ourkorean-56a3e.firebaseio.com/songs/unofficial/.json?shallow=true\" }, (error, response, body) => {\n      Object.keys(JSON.parse(body)).forEach((userWithCard) => {\n        loadSplashFrom(`songs/unofficial/${userWithCard}/splash`)\n      });\n    });\n  }\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,KAAK,MAAM,sBAAsB;AACxC,OAAOC,OAAO,MAAM,SAAS;AAE7B,IAAIC,cAAc,GAAG,KAAK;AAC1B,IAAIC,gBAAgB,GAAG,KAAK;AAE5B,OAAO,SAASC,SAASA,CAAA,EAAkB;EAAA,IAAjBC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACvC,SAASG,cAAcA,CAACC,IAAI,EAAE;IAC5BX,WAAW,CAACW,IAAI,EAAGC,gBAAgB,IAAK;MACtC;MACA,IAAIC,iBAAiB,GAAG,EAAE;MAC1BC,MAAM,CAACC,IAAI,CAACH,gBAAgB,CAAC,CAACI,OAAO,CAAEC,CAAC,IAAK;QAC3C,IAAIX,QAAQ,IAAIM,gBAAgB,CAACK,CAAC,CAAC,CAACC,MAAM,EAAE;UAC1CL,iBAAiB,CAACM,IAAI,CAAC;YACrBC,KAAK,EAAEH,CAAC;YACRI,KAAK,EAAET,gBAAgB,CAACK,CAAC,CAAC,CAACI,KAAK;YAChCC,KAAK,EAAEV,gBAAgB,CAACK,CAAC,CAAC,CAACK,KAAK;YAChCC,KAAK,EAAEX,gBAAgB,CAACK,CAAC,CAAC,CAACM,KAAK;YAChCC,MAAM,EAAEZ,gBAAgB,CAACK,CAAC,CAAC,CAACO,MAAM;YAClCC,UAAU,EAAE,CAACnB;UACf,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEFL,KAAK,CAACyB,QAAQ,CAAC;QACbC,IAAI,EAAE,sBAAsB;QAC5Bf,gBAAgB,EAAEC;MACpB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEA;EACA,IAAKP,QAAQ,IAAIH,cAAc,IAAM,CAACG,QAAQ,IAAIF,gBAAiB,EAAE;IACnE;EACF;EACA,IAAIE,QAAQ,EAAE;IACZH,cAAc,GAAG,IAAI;EACvB,CAAC,MAAM;IACLC,gBAAgB,GAAG,IAAI;EACzB;EAEA,IAAIE,QAAQ,EAAE;IACZI,cAAc,CAAC,uBAAuB,CAAC;EACzC,CAAC,MAAM;IACL;IACAR,OAAO,CAAC;MAAE0B,GAAG,EAAE;IAA6E,CAAC,EAAE,CAACC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,KAAK;MACxHjB,MAAM,CAACC,IAAI,CAACiB,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,CAAC,CAACf,OAAO,CAAEkB,YAAY,IAAK;QACtDxB,cAAc,CAAE,oBAAmBwB,YAAa,SAAQ,CAAC;MAC3D,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}