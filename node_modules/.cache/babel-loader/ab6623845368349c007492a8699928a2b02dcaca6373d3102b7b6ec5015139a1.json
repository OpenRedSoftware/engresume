{"ast":null,"code":"var _jsxFileName = \"/home/xacket/Projects/engresume/src/pages/learn/corelesson/underinput/HintButton.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { getCurrentQuestion } from \"../../utils\";\nimport { useLessonInputFocus } from \"../utils\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function calculateHintInput(input) {\n  for (let i = 0; i < getCurrentQuestion().answer.length; i++) {\n    if (getCurrentQuestion().answer[i] !== input[i]) {\n      return getCurrentQuestion().answer.substring(0, i + 1);\n    }\n  }\n  return getCurrentQuestion().answer;\n}\nconst HintButton = props => {\n  _s();\n  const setInputFocus = useLessonInputFocus()[1];\n  return /*#__PURE__*/_jsxDEV(Button, {\n    className: \"mt-3 mb-2 mr-2 pl-3 pr-3\"\n    //@ts-ignore\n    ,\n    variant: \"outline\",\n    size: \"sm\",\n    style: {\n      height: \"3em\",\n      width: \"2em\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    onClick: () => {\n      props.dispatch({\n        type: \"LESSON_UPDATE_INPUT\",\n        input: calculateHintInput(props.input)\n      });\n      props.dispatch({\n        type: \"LESSON_UPDATE_ERROR\",\n        error: \"\"\n      });\n      setInputFocus();\n    },\n    children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faQuestionCircle,\n      size: \"lg\",\n      color: \"grey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(HintButton, \"sjQWb+UBj08jvzUy8gsEqNQxTIo=\", false, function () {\n  return [useLessonInputFocus];\n});\n_c = HintButton;\nconst mapStateToProps = state => ({\n  input: state.lessonInput\n});\nexport default connect(mapStateToProps)(HintButton);\nvar _c;\n$RefreshReg$(_c, \"HintButton\");","map":{"version":3,"names":["React","connect","Button","getCurrentQuestion","useLessonInputFocus","FontAwesomeIcon","faQuestionCircle","jsxDEV","_jsxDEV","calculateHintInput","input","i","answer","length","substring","HintButton","props","_s","setInputFocus","className","variant","size","style","height","width","display","justifyContent","alignItems","onClick","dispatch","type","error","children","icon","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStateToProps","state","lessonInput","$RefreshReg$"],"sources":["/home/xacket/Projects/engresume/src/pages/learn/corelesson/underinput/HintButton.tsx"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { getCurrentQuestion } from \"../../utils\";\nimport { useLessonInputFocus } from \"../utils\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faQuestionCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport function calculateHintInput(input) {\n  for (let i = 0; i < getCurrentQuestion().answer.length; i++) {\n    if (getCurrentQuestion().answer[i] !== input[i]) {\n      return getCurrentQuestion().answer.substring(0, i + 1);\n    }\n  }\n  return getCurrentQuestion().answer;\n}\n\nconst HintButton = (props) => {\n  const setInputFocus = useLessonInputFocus()[1];\n\n  return (\n    <Button\n      className=\"mt-3 mb-2 mr-2 pl-3 pr-3\"\n      //@ts-ignore\n      variant=\"outline\"\n      size=\"sm\"\n      style={{\n        height: \"3em\",\n        width: \"2em\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n      onClick={() => {\n\n        props.dispatch({\n          type: \"LESSON_UPDATE_INPUT\",\n          input: calculateHintInput(props.input),\n        });\n        props.dispatch({ type: \"LESSON_UPDATE_ERROR\", error: \"\" });\n        setInputFocus();\n      }}\n    >\n      <FontAwesomeIcon icon={faQuestionCircle} size=\"lg\" color=\"grey\" />\n    </Button>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  input: state.lessonInput,\n});\n\nexport default connect(mapStateToProps)(HintButton);\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,mBAAmB,QAAQ,UAAU;AAC9C,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SACEC,gBAAgB,QACX,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,OAAO,SAASC,kBAAkBA,CAACC,KAAK,EAAE;EACxC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,kBAAkB,CAAC,CAAC,CAACS,MAAM,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC3D,IAAIR,kBAAkB,CAAC,CAAC,CAACS,MAAM,CAACD,CAAC,CAAC,KAAKD,KAAK,CAACC,CAAC,CAAC,EAAE;MAC/C,OAAOR,kBAAkB,CAAC,CAAC,CAACS,MAAM,CAACE,SAAS,CAAC,CAAC,EAAEH,CAAC,GAAG,CAAC,CAAC;IACxD;EACF;EACA,OAAOR,kBAAkB,CAAC,CAAC,CAACS,MAAM;AACpC;AAEA,MAAMG,UAAU,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC5B,MAAMC,aAAa,GAAGd,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;EAE9C,oBACEI,OAAA,CAACN,MAAM;IACLiB,SAAS,EAAC;IACV;IAAA;IACAC,OAAO,EAAC,SAAS;IACjBC,IAAI,EAAC,IAAI;IACTC,KAAK,EAAE;MACLC,MAAM,EAAE,KAAK;MACbC,KAAK,EAAE,KAAK;MACZC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE;IACd,CAAE;IACFC,OAAO,EAAEA,CAAA,KAAM;MAEbZ,KAAK,CAACa,QAAQ,CAAC;QACbC,IAAI,EAAE,qBAAqB;QAC3BpB,KAAK,EAAED,kBAAkB,CAACO,KAAK,CAACN,KAAK;MACvC,CAAC,CAAC;MACFM,KAAK,CAACa,QAAQ,CAAC;QAAEC,IAAI,EAAE,qBAAqB;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC;MAC1Db,aAAa,CAAC,CAAC;IACjB,CAAE;IAAAc,QAAA,eAEFxB,OAAA,CAACH,eAAe;MAAC4B,IAAI,EAAE3B,gBAAiB;MAACe,IAAI,EAAC,IAAI;MAACa,KAAK,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEb,CAAC;AAAArB,EAAA,CA7BKF,UAAU;EAAA,QACQX,mBAAmB;AAAA;AAAAmC,EAAA,GADrCxB,UAAU;AA+BhB,MAAMyB,eAAe,GAAIC,KAAK,KAAM;EAClC/B,KAAK,EAAE+B,KAAK,CAACC;AACf,CAAC,CAAC;AAEF,eAAezC,OAAO,CAACuC,eAAe,CAAC,CAACzB,UAAU,CAAC;AAAC,IAAAwB,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}