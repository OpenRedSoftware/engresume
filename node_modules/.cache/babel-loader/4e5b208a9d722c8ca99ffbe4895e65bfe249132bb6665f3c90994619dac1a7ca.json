{"ast":null,"code":"import { getNewQuestion, isDifferentDate } from \"./utils\";\nimport { getDBObject, getUserDBObject, transaction, getUidFromNick } from \"../../firebase/database\";\nimport store from \"../../reducers/store\";\nexport function loadAndInitSong(author, songname) {\n  function loadSongFrom(detailedPath, splashPath, userLoadPath) {\n    // Load questions\n    getDBObject(`${detailedPath}/questions`, questions => {\n      //Todo: Test putting a delay on this, see if it breaks when getNewQuestion is called for a new user\n      store.dispatch({\n        type: \"LESSON_SET_QUESTIONS\",\n        questions: questions.map((question, index) => {\n          return {\n            question: question.q,\n            answer: question.a,\n            hint: question.h,\n            id: index,\n            answeredCount: 0\n          };\n        })\n      });\n\n      //There's too many cases this wouldn't get called, I cba :joy:\n      store.dispatch({\n        type: \"LESSON_CHANGE_QUESTION_INDEX\",\n        id: getNewQuestion()\n      });\n    });\n\n    //Load video\n    getDBObject(`${splashPath}/vid`, id => {\n      store.dispatch({\n        type: \"CHANGE_VIDEO_ID\",\n        id\n      });\n    });\n\n    // Load learned today\n    getUserDBObject(`learning/learnedToday`, snapshot => {\n      if (snapshot && snapshot.wordsLearnedToday && snapshot.whenTodayWas && Number.isInteger(snapshot.wordsLearnedToday) && Number.isInteger(snapshot.whenTodayWas) && !isDifferentDate(Date.now(), snapshot.whenTodayWas)) {\n        store.dispatch({\n          type: \"LESSON_SET_LSST\",\n          lsst: snapshot.whenTodayWas\n        });\n        store.dispatch({\n          type: \"LESSON_SET_NEW_WORDS_LEARNED_TODAY\",\n          words: snapshot.wordsLearnedToday\n        });\n      } else {\n        store.dispatch({\n          type: \"LESSON_SET_LSST\",\n          lsst: Date.now()\n        });\n        store.dispatch({\n          type: \"LESSON_SET_NEW_WORDS_LEARNED_TODAY\",\n          words: 0\n        });\n      }\n    });\n\n    // Load question answers\n    getUserDBObject(`${userLoadPath}`, snapshot => {\n      if (snapshot && snapshot.answers) {\n        store.dispatch({\n          type: \"LESSON_UPDATE_ANSWERED_COUNTS_TIMES\",\n          qstatus: snapshot.answers\n        });\n      }\n      store.dispatch({\n        type: \"LESSON_CHANGE_QUESTION_INDEX\",\n        id: getNewQuestion()\n      });\n    });\n\n    //Inc views\n    transaction(`${splashPath}/views`, views => {\n      if (!views) {\n        views = 0;\n      }\n      return views + 1;\n    });\n  }\n  store.dispatch({\n    type: \"LESSON_SET_AUTHOR\",\n    author: author ? author : null\n  });\n  store.dispatch({\n    type: \"LESSON_SET_LESSON_NAME\",\n    lessonName: songname\n  });\n  if (!author) {\n    loadSongFrom(`songs/official/detailed/${songname}`, `songs/official/splash/${songname}`, `learning/songs/official/${songname}`);\n  } else {\n    getUidFromNick(author, uid => {\n      loadSongFrom(`songs/unofficial/${uid}/detailed/${songname}`, `songs/unofficial/${uid}/splash/${songname}`, `learning/songs/unofficial/${uid}/${songname}`);\n    });\n  }\n}","map":{"version":3,"names":["getNewQuestion","isDifferentDate","getDBObject","getUserDBObject","transaction","getUidFromNick","store","loadAndInitSong","author","songname","loadSongFrom","detailedPath","splashPath","userLoadPath","questions","dispatch","type","map","question","index","q","answer","a","hint","h","id","answeredCount","snapshot","wordsLearnedToday","whenTodayWas","Number","isInteger","Date","now","lsst","words","answers","qstatus","views","lessonName","uid"],"sources":["/home/xacket/Projects/engresume/src/pages/learn/initutils.js"],"sourcesContent":["import { getNewQuestion, isDifferentDate } from \"./utils\";\nimport {\n  getDBObject,\n  getUserDBObject,\n  transaction,\n  getUidFromNick,\n} from \"../../firebase/database\";\nimport store from \"../../reducers/store\";\n\nexport function loadAndInitSong(author, songname) {\n  function loadSongFrom(detailedPath, splashPath, userLoadPath) {\n    // Load questions\n    getDBObject(`${detailedPath}/questions`, (questions) => {\n      //Todo: Test putting a delay on this, see if it breaks when getNewQuestion is called for a new user\n      store.dispatch({\n        type: \"LESSON_SET_QUESTIONS\",\n        questions: questions.map((question, index) => {\n          return {\n            question: question.q,\n            answer: question.a,\n            hint: question.h,\n            id: index,\n            answeredCount: 0,\n          };\n        }),\n      });\n\n      //There's too many cases this wouldn't get called, I cba :joy:\n      store.dispatch({\n        type: \"LESSON_CHANGE_QUESTION_INDEX\",\n        id: getNewQuestion(),\n      });\n    });\n\n    //Load video\n    getDBObject(`${splashPath}/vid`, (id) => {\n      store.dispatch({\n        type: \"CHANGE_VIDEO_ID\",\n        id,\n      });\n    });\n\n    // Load learned today\n    getUserDBObject(`learning/learnedToday`, (snapshot) => {\n      if (snapshot &&\n        snapshot.wordsLearnedToday &&\n        snapshot.whenTodayWas &&\n        Number.isInteger(snapshot.wordsLearnedToday) &&\n        Number.isInteger(snapshot.whenTodayWas) &&\n        !isDifferentDate(Date.now(), snapshot.whenTodayWas)) {\n        store.dispatch({\n          type: \"LESSON_SET_LSST\",\n          lsst: snapshot.whenTodayWas,\n        });\n        store.dispatch({\n          type: \"LESSON_SET_NEW_WORDS_LEARNED_TODAY\",\n          words: snapshot.wordsLearnedToday,\n        });\n      } else {\n        store.dispatch({\n          type: \"LESSON_SET_LSST\",\n          lsst: Date.now(),\n        });\n        store.dispatch({\n          type: \"LESSON_SET_NEW_WORDS_LEARNED_TODAY\",\n          words: 0,\n        });\n      }\n    });\n\n    // Load question answers\n    getUserDBObject(`${userLoadPath}`, (snapshot) => {\n      if (snapshot && snapshot.answers) {\n        store.dispatch({\n          type: \"LESSON_UPDATE_ANSWERED_COUNTS_TIMES\",\n          qstatus: snapshot.answers,\n        });\n      }\n      store.dispatch({\n        type: \"LESSON_CHANGE_QUESTION_INDEX\",\n        id: getNewQuestion(),\n      });\n    });\n\n    //Inc views\n    transaction(`${splashPath}/views`, (views) => {\n      if (!views) {\n        views = 0;\n      }\n      return views + 1;\n    });\n  }\n\n  store.dispatch({ type: \"LESSON_SET_AUTHOR\", author: author ? author : null });\n  store.dispatch({ type: \"LESSON_SET_LESSON_NAME\", lessonName: songname });\n\n  if (!author) {\n    loadSongFrom(\n      `songs/official/detailed/${songname}`,\n      `songs/official/splash/${songname}`,\n      `learning/songs/official/${songname}`\n    );\n  } else {\n    getUidFromNick(author, (uid) => {\n      loadSongFrom(\n        `songs/unofficial/${uid}/detailed/${songname}`,\n        `songs/unofficial/${uid}/splash/${songname}`,\n        `learning/songs/unofficial/${uid}/${songname}`\n      );\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}